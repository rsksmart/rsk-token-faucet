{"version":3,"sources":["components/row.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Row","token","add","signer","faucet","contract","Contract","toLowerCase","useState","balance","setBalance","address","setAddress","faucetBalance","setFaucetBalance","disable","setDisable","useEffect","a","getAddress","balanceOf","b","faucetB","src","logo","width","name","symbol","Math","pow","toString","disabled","onClick","dispense","addresses","Object","keys","contractMap","rpcUrls","31","supportedChains","map","Number","rLogin","RLogin","App","mm","setMM","setFaucet","handleLogin","connect","provider","web3Provider","ethers","providers","Web3Provider","getSigner","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAyCeA,EAtCsE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAOpGC,EAAW,IAAIC,IAASJ,EAAIK,cAJd,CAElB,mDAE4DJ,GAPyD,EAQzFK,mBAAc,MAR2E,mBAQhHC,EARgH,KAQvGC,EARuG,OASzFF,mBAAS,IATgF,mBAShHG,EATgH,KASvGC,EATuG,OAU7EJ,mBAAc,MAV+D,mBAUhHK,EAVgH,KAUjGC,EAViG,OAWzFN,oBAAS,GAXgF,mBAWhHO,EAXgH,KAWvGC,EAXuG,KA0BvH,OAdAC,qBAAU,WACR,sBAAC,iBAAAC,EAAA,aAAAA,EAAA,sEACiBf,EAAOgB,aADxB,cACOD,EADP,gBAEiBb,EAASe,UAAUF,GAFpC,cAEOG,EAFP,gBAGuBhB,EAASe,UAAUhB,EAAOO,SAHjD,OAGOW,EAHP,OAICZ,EAAWW,GACXT,EAAWM,GACXJ,EAAiBQ,GACbT,EAAgB,GAClBG,GAAW,GARd,2CAAD,MAcA,gCACE,qBAAKO,IA1BT,0FA0B0BtB,EAAMuB,KAAMC,MAAQ,SAC1C,0CAAaxB,EAAMyB,KAAnB,OACA,0CAAazB,EAAM0B,OAAnB,OACA,2CAAczB,EAAd,OACA,2CAAcO,IAAYA,EAAUmB,KAAKC,IAAI,GAAI,IAAMpB,EAAUmB,KAAKC,IAAI,GAAI,KAAKC,cACnF,wBAAQC,SAAUhB,EAASiB,QAAS,kBAAM5B,EAAO6B,SAAS/B,EAAIK,cAAeI,IAA7E,0B,yBC9BAuB,EAAYC,OAAOC,KAAKC,KACxBC,EAAU,CACdC,GAAI,sCAEAC,EAAkBL,OAAOC,KAAKE,GAASG,IAAIC,QAE3CC,EAAS,IAAIC,IAAO,CACxBN,UACAE,oBAyBaK,MAtBf,WAAiB,IAAD,EACMrC,mBAAc,MADpB,mBACPsC,EADO,KACHC,EADG,OAEcvC,mBAA0B,MAFxC,mBAEPJ,EAFO,KAEC4C,EAFD,KAGRC,EAAW,uCAAG,kCAAA/B,EAAA,sEACSyB,EAAOO,UADhB,gBACVC,EADU,EACVA,SACFC,EAAe,IAAIC,IAAOC,UAAUC,aAAaJ,GAAUK,YAC3DpD,EAAS,IAAIE,IAAS,6CAA8C,CACxE,gDACC8C,GACHL,EAAMK,GACNJ,EAAU5C,GAPQ,2CAAH,qDASjB,OACE,sBAAKqD,UAAU,MAAf,6BAEIX,GAAM1C,GAAW8B,EAAUO,KAAI,SAAC9B,GAAD,OAAkB,cAAC,EAAD,CAAmBV,MAASoC,IAAY1B,GAAUT,IAAOS,EAASR,OAAU2C,EAAI1C,OAAQA,GAA9EO,MAC7D,wBAAQqB,QAAWiB,EAAnB,oBACCH,GAAMA,EAAGhB,eCpBD4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13243b09.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Contract, Signer } from 'ethers'\n\nconst Row: React.FC<{ token: any, add: string, signer: Signer, faucet: Contract }> = ({ token, add, signer, faucet }) => {\n  const baseDir =\n  'https://raw.githubusercontent.com/rsksmart/rsk-testnet-contract-metadata/master/images/'\n  const contractAbi = [\n    // Get the account balance\n    'function balanceOf(address) view returns (uint)'\n  ]\n  const contract = new Contract(add.toLowerCase(), contractAbi, signer)\n  const [balance, setBalance] = useState<any>(null)\n  const [address, setAddress] = useState('')\n  const [faucetBalance, setFaucetBalance] = useState<any>(null)\n  const [disable, setDisable] = useState(true)\n  useEffect(() => {\n    (async () => {\n      const a = await signer.getAddress()\n      const b = await contract.balanceOf(a)\n      const faucetB = await contract.balanceOf(faucet.address)\n      setBalance(b)\n      setAddress(a)\n      setFaucetBalance(faucetB)\n      if (faucetBalance > 0) {\n        setDisable(false)\n      }\n    })()\n  })\n\n  return (\n    <div>\n      <img src = {baseDir + token.logo} width = \"50px\"></img>\n      <h3>Nombre: {token.name} </h3>\n      <h3>Symbol: {token.symbol} </h3>\n      <h3>Address: {add} </h3>\n      <h3>Balance: {balance && (balance / Math.pow(10, 18) + balance % Math.pow(10, 18)).toString()}</h3>\n      <button disabled={disable} onClick={() => faucet.dispense(add.toLowerCase(), address)}>Dispense</button>\n    </div>\n  )\n}\n\nexport default Row\n","import React, { useState } from 'react'\nimport contractMap from '@rsksmart/rsk-testnet-contract-metadata'\nimport Row from './components/row'\nimport RLogin from '@rsksmart/rlogin'\nimport { ethers, Contract } from 'ethers'\n\nconst addresses = Object.keys(contractMap)\nconst rpcUrls = {\n  31: 'https://public-node.testnet.rsk.co'\n}\nconst supportedChains = Object.keys(rpcUrls).map(Number)\n\nconst rLogin = new RLogin({\n  rpcUrls,\n  supportedChains\n})\n\nfunction App () {\n  const [mm, setMM] = useState<any>(null)\n  const [faucet, setFaucet] = useState<null | Contract>(null)\n  const handleLogin = async () => {\n    const { provider } = await rLogin.connect()\n    const web3Provider = new ethers.providers.Web3Provider(provider).getSigner()\n    const faucet = new Contract('0x11f2753e9a597473da2f51492f4fefac1c572640', [\n      'function dispense(address token, address to)'\n    ], web3Provider)\n    setMM(web3Provider)\n    setFaucet(faucet)\n  }\n  return (\n    <div className=\"App\">\n      RSK Token Faucet\n      {(mm && faucet) && addresses.map((address: any) => <Row key={address} token = {contractMap[address]} add = {address} signer = {mm} faucet={faucet} />)}\n      <button onClick = {handleLogin} >Log In</button>\n      {mm && mm.toString()}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}